statement := (declaration | assignment | call | control) '\n'

declaration := type ident ('=' expr)?
assignment := ident '=' expr
call := ident '(' params ')'
control := ifctrl | whilectrl | forctrl
         | ('return' expr) | 'break' | 'continue'
comment := '#' string

ifctrl := ifclause elifclause* elseclause?
ifclause := 'if' flagexpr '{' statement* '}'
elifclause := 'else' ifclause
elseclause := 'else' '{' statement* '}'
whilectrl := 'while' flagexpr '{' statement* '}'
forctrl := 'for' ident 'in' listlike '{' statement* '}'

type := 'num' | 'str' | 'bool' | 'list' | 'func'
ident := [0-9a-zA-Z_-]+
expr := numexpr | flagexpr | funcexpr
      | listlike | (listlike '[' '-'? numeral+ ']')
params := (expr ',')* (expr | null)

flagexpr := 'true' | 'false' | call | ('(' flagexpr ')')
          | ('not' flagexpr) | (flagexpr ('and' | 'or') flagexpr)
          | (numexpr ('<' | '>' | '<=' | '>=' | '==' | '!=' ) numexpr)
listlike := listexpr | strexpr | rangeexpr
listexpr := ('[' (expr ',')* (expr | null) ']') | call
          | (listexpr '+' expr) | (listexpr '[' ('-'? numeral+)? ':' ('-'? numeral+)? ']')
funcexpr := '(' (type ident ',')* (type ident | null) ')' ( '->' type )? '{' statement* '}'
numexpr := number | call | '(' numexpr ')' | (numexpr [-+*/%^] numexpr)
strexpr := string | call | (strexpr '+' strexpr)
         | (strexpr '[' ('-'? numeral+)? ':' ('-'? numeral+)? ']')
rangeexpr := '[' number ',' number ',' '...' number ']'

number := '-'? numeral+ ('.' numeral+)?
string := ''' [^']* '''
numeral := [0-9]
null := ''
