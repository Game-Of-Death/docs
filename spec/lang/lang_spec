statement := (declaration | assignment | call | control) '\n'

declaration := (('num' | 'str' | 'flag' | 'list' | 'func') ident)
             | ('num' ident '=' numexpr)
             | ('str' ident '=' strexpr)
             | ('flag' ident '=' flagexpr)
             | ('list' ident '=' listexpr)
             | ('func' ident '=' funcexpr)
assignment := ident '=' expr
call := ident '(' params ')'
control := ifctrl | whilectrl | forctrl

ifctrl := ifclause elifclause* elseclause?
ifclause := 'if' flagexpr '{' statement* '}'
elifclause := 'else' ifclause
elseclause := 'else' '{' statement* '}'
whilectrl := 'while' flagexpr '{' statement* '}'
forctrl := 'for' ident 'in' listexpr '{' statement* '}'

ident := character+
expr := numexpr | strexpr | flagexpr | listexpr | funcexpr
params := (expr ',')* (expr | null)

flagexpr := 'true' | 'false' | call | ('(' flagexpr ')')
          | ('not' flagexpr) | (flagexpr ('and' | 'or') flagexpr)
          | (numexpr ('<' | '>' | '<=' | '>=' | '==' | '!=' ) numexpr)
listexpr := ('[' (expr ',')* (expr | null) ']') | call | (listexpr '+' expr)
funcexpr := '(' (ident ',')* (ident | null) ')' '{' statement* '}'
numexpr := number | call | '(' numexpr ')' | (numexpr [-+*/%] numexpr)
strexpr := string | call | (strexpr '+' strexpr)

number := numeral+ ('.' numeral+)?
string := ''' character+ '''
character := [0-9a-zA-Z_-]
numeral := [0-9]
null := ''
