statement := (instruction | comment | (instruction comment)) '\n'

instruction := declaration | assignment | call | control | funcdef
comment := '#' string

declaration := type ident ('=' expr)?
assignment := ident ('[' expr ']')? '=' expr
call := ident '(' params ')'
control := ifctrl | whilectrl | forctrl
         | ('return' expr) | 'break' | 'continue'

ifctrl := ifclause elifclause* elseclause?
ifclause := 'if' boolexpr '{' statement* '}'
elifclause := 'else' ifclause
elseclause := 'else' '{' statement* '}'
whilectrl := 'while' boolexpr '{' statement* '}'
forctrl := 'for' ident 'in' listlike '{' statement* '}'

type := datatype | functype
datatype := 'num' | 'str' | 'bool' | ('[' datatype ']') | 'struct'
          | ('[' datatype ':' datatype ']')
funcdef := 'func' ident '(' (type ident ',')*  (type ident | null) ')' ('->' datatype)? '{' statement* '}'
functype := ('{' (('(' (type ',')* type) | null) ')' ('->' datatype)? '}') | 'func'

ident := [0-9a-zA-Z_-]+
expr := numexpr | boolexpr | structexpr | listlike
      | (listlike '[' '-'? numeral+ ']')
params := ((expr ',')* expr) | null

boolexpr := 'true' | 'false' | call | ('(' boolexpr ')')
          | ('not' boolexpr) | (boolexpr ('and' | 'or') boolexpr)
          | (numexpr ('<' | '>' | '<=' | '>=' | '==' | '!=' ) numexpr)
listlike := listexpr | strexpr | rangeexpr
listexpr := ('[' (((expr ',')* expr) | null) ']') | call
          | (listexpr '+' expr) | (listexpr '[' ('-'? numeral+)? ':' ('-'? numeral+)? ']')
numexpr := number | call | '(' numexpr ')' | (numexpr [-+*/%^] numexpr)
strexpr := string | call | (strexpr '+' strexpr)
         | (strexpr '[' ('-'? numeral+)? ':' ('-'? numeral+)? ']')
dictexpr := ('[' (((expr ':' expr ',')* (expr ':' expr)) | null) ']') | call
structexpr := '{' (type ident)* '}' | call
rangeexpr := '[' number ',' number ',' '...' number ']'

number := '-'? numeral+ ('.' numeral+)?
string := ''' [^']* '''
numeral := [0-9]
null := ''
