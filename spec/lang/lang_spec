statement := (declaration | assignment | call | control) '\n'

declaration := ('num' | 'str' | 'flag' | 'list' | 'func') ident ('=' expr)?
assignment := ident '=' expr
call := ident '(' params ')'
control := ifctrl | whilectrl | forctrl

ifctrl := ifclause elifclause* elseclause?
ifclause := 'if' flagexpr '{' statement* '}'
elifclause := 'else' ifclause
elseclause := 'else' '{' statement* '}'
whilectrl := 'while' flagexpr '{' statement* '}'
forctrl := 'for' ident 'in' listlike '{' statement* '}'

ident := character+
expr := numexpr | flagexpr | funcexpr
      | listlike | (listlike '[' '-'? numeral+ ']')
params := (expr ',')* (expr | null)

flagexpr := 'true' | 'false' | call | ('(' flagexpr ')')
          | ('not' flagexpr) | (flagexpr ('and' | 'or') flagexpr)
          | (numexpr ('<' | '>' | '<=' | '>=' | '==' | '!=' ) numexpr)
listlike := listexpr | strexpr
listexpr := ('[' (expr ',')* (expr | null) ']') | call
          | (listexpr '+' expr) | (listexpr '[' '-'? numeral+ ':' '-'? numeral+ ']')
funcexpr := '(' (ident ',')* (ident | null) ')' '{' statement* '}'
numexpr := number | call | '(' numexpr ')' | (numexpr [-+*/%] numexpr)
strexpr := string | call | (strexpr '+' strexpr)
         | (strexpr '[' '-'? numeral+ ':' '-'? numeral+ ']')

number := '-'? numeral+ ('.' numeral+)?
string := ''' character+ '''
character := [0-9a-zA-Z_-]
numeral := [0-9]
null := ''
